1. Создать новую ветку в гите - возможно это выльется в проект который мы сохраним как работу в твоё портфолио, поэтому я хочу отделить это. 
2. Задание: 
  Начнем с небольшого функционала и потом будет его расширять. Это важное условие, потому что тебе нужно постараться так формировать код, чтобы было легко добавлять новые фичи. 
  Задание 09.10.2023 
  Программа должна получать текущий курс биткоина и выводить его на экран.
  Задание 14.10.2023 
  Среди всех токенов найти топ3 с наибольшим приростом стоимости в процентах за прошедшую неделю и топ3 с наибольшим упадком. Вывести на экран 
  Для топ1 в обоих номинациях посчитать стандартное отклонение на дневных свечах за месяц и сравнить с отклонением за прошедшую неделю из пункта 1. Вывести результаты на экран.
  Написать функцию custom_round, которая будет округлять до целого если стоимость актива >1000, до одного знака если между 100 и 1000, до двух знаков если между 1 и 100, и до 4 знаков если от 0 до 1. Все выводы на экран использовать только с этим округлением. 
  

Реализация: 
Прочитай что такое свечи в трейдинге. Особо не углубляйся, просто пойми что они показывают. Для упрощения задания (мы всё-таки учим программирование,а не финансы), 
будем считать "ценой" актива - цену открытия дневной свечи. Соотвественно, в первом задании разница будет между ценой открытия дня неделю назад и ценой открытия сегодняшнего дня. Ендпоинт свечей в апи бинанса GET /api/v3/klines
Время будет возвращаться в их формате, вот функция превращения в человеческий вид (даю небольшую подсказку, потому что сам долго сидел и думал как это перевести) 
  def convert_time(unix_time):
      _t = unix_time / 1000
      timestamp = datetime.utcfromtimestamp(_t)
      date = timestamp.strftime('%Y-%m-%d %H:%M:%S')
      return date
Для вычисления стандартного отклонения (оно же Среднеквадрати́ческое отклонение) используй функцию модуля numpy (или любого другого мат. модуля, но не вздумай писать сама) 
